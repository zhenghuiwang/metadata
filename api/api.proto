// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Placeholder for Core API definitions.

syntax = "proto3";

package api;

import "google/api/annotations.proto";

// Dummy placeholder resource.
message Resource {
  string name = 1;
}

message GetResourceRequest {
  string name = 1;
}

service MetadataService {
  rpc GetResource(GetResourceRequest) returns (Resource) {
    option (google.api.http) = {
      get: "/api/v1/resource/{name}"
    };
  }

  // Create a new entity type, e.g.
  //
  // Request path /v1/type/namespaces/my-company/kinds/tf-model/versions/v1
  // body in OpenAPI schema format
  // {
  //    "type": "object",
  //    "required": ["name", "version"],
  //    "property": {
  //      "name": {
  //          "type": "string"
  //      }
  //      "version": {
  //          "type": "string"
  //      }
  //      "layers": {
  //          "type": "double"
  //      }
  //    }
  // }
  rpc CreateType(CreateTypeRequest) returns (Type) {
    option (google.api.http) = {
      // bind the relative resource name to Type.name field.
      post: "/api/v1/type/{name=namespaces/*/kinds/*/versions/*}"
      body: "schema" // bind the HTTP body to Type.schema field.
    };
  }

  rpc CreateArtifact(Artifact) returns (Artifact) {
    option (google.api.http) = {
      // bind the relative resource name to Type.name field.
      post: "/api/v1/artifact/{typeName=namespaces/*/kinds/*/versions/*}"
      body: "payload" // bind the HTTP body to Type.schema field.
    };
  }
}

// Entity Type.
message Type {
  // UUID of this type in the system.
  string id = 1;
  // name uniquely identify a type.
  // Following the convention of K8s cutomized resource, it consists of three parts:
  //   1. "namespace" of the this type, e.g. "my-company.com";
  //   2. "kind" is the actual type name, e.g. "my_text_file"; and
  //   3. "version" of the type, e.g. "v1".
  string name = 2;
  // type specification as a JSON string of an OpenAPI schema object.
  // https://swagger.io/specification/#schemaObject
  string schema = 3;
}

message CreateTypeRequest {
  // name is a relative resouce name, which uniquely identify a type.
  string name = 1;
  // type specification via a JSON string of a OpenAPI schema object.
  bytes schema = 2;
}

message Artifact {
  // UUID of this entity in the system.
  string id = 1;
  // the name of the entity type, corresponding to one registered "Type.name" field.
  string typeName = 2;
  // JSON representation of the entity.
  bytes payload = 3;
}
