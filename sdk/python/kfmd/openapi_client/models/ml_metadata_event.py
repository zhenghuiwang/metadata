# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MlMetadataEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_id': 'str',
        'execution_id': 'str',
        'path': 'EventPath',
        'type': 'MlMetadataEventType',
        'milliseconds_since_epoch': 'str'
    }

    attribute_map = {
        'artifact_id': 'artifact_id',
        'execution_id': 'execution_id',
        'path': 'path',
        'type': 'type',
        'milliseconds_since_epoch': 'milliseconds_since_epoch'
    }

    def __init__(self, artifact_id=None, execution_id=None, path=None, type=None, milliseconds_since_epoch=None):  # noqa: E501
        """MlMetadataEvent - a model defined in OpenAPI"""  # noqa: E501

        self._artifact_id = None
        self._execution_id = None
        self._path = None
        self._type = None
        self._milliseconds_since_epoch = None
        self.discriminator = None

        if artifact_id is not None:
            self.artifact_id = artifact_id
        if execution_id is not None:
            self.execution_id = execution_id
        if path is not None:
            self.path = path
        if type is not None:
            self.type = type
        if milliseconds_since_epoch is not None:
            self.milliseconds_since_epoch = milliseconds_since_epoch

    @property
    def artifact_id(self):
        """Gets the artifact_id of this MlMetadataEvent.  # noqa: E501

        The artifact id is required for an event, and should refer to an existing artifact.  # noqa: E501

        :return: The artifact_id of this MlMetadataEvent.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this MlMetadataEvent.

        The artifact id is required for an event, and should refer to an existing artifact.  # noqa: E501

        :param artifact_id: The artifact_id of this MlMetadataEvent.  # noqa: E501
        :type: str
        """

        self._artifact_id = artifact_id

    @property
    def execution_id(self):
        """Gets the execution_id of this MlMetadataEvent.  # noqa: E501

        The execution_id is required for an event, and should refer to an existing execution.  # noqa: E501

        :return: The execution_id of this MlMetadataEvent.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this MlMetadataEvent.

        The execution_id is required for an event, and should refer to an existing execution.  # noqa: E501

        :param execution_id: The execution_id of this MlMetadataEvent.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def path(self):
        """Gets the path of this MlMetadataEvent.  # noqa: E501


        :return: The path of this MlMetadataEvent.  # noqa: E501
        :rtype: EventPath
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MlMetadataEvent.


        :param path: The path of this MlMetadataEvent.  # noqa: E501
        :type: EventPath
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this MlMetadataEvent.  # noqa: E501


        :return: The type of this MlMetadataEvent.  # noqa: E501
        :rtype: MlMetadataEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MlMetadataEvent.


        :param type: The type of this MlMetadataEvent.  # noqa: E501
        :type: MlMetadataEventType
        """

        self._type = type

    @property
    def milliseconds_since_epoch(self):
        """Gets the milliseconds_since_epoch of this MlMetadataEvent.  # noqa: E501


        :return: The milliseconds_since_epoch of this MlMetadataEvent.  # noqa: E501
        :rtype: str
        """
        return self._milliseconds_since_epoch

    @milliseconds_since_epoch.setter
    def milliseconds_since_epoch(self, milliseconds_since_epoch):
        """Sets the milliseconds_since_epoch of this MlMetadataEvent.


        :param milliseconds_since_epoch: The milliseconds_since_epoch of this MlMetadataEvent.  # noqa: E501
        :type: str
        """

        self._milliseconds_since_epoch = milliseconds_since_epoch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlMetadataEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
